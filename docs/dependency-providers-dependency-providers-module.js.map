{"version":3,"sources":["./src/app/components/dependency-injection/menu/dependency-providers/useClassExample/services/example-two.service.ts","./src/app/components/dependency-injection/menu/dependency-providers/dependency-providers.component.ts","./src/app/components/dependency-injection/menu/dependency-providers/dependency-providers.component.html","./src/app/components/dependency-injection/menu/dependency-providers/dependency-providers-routing.module.ts","./src/app/components/dependency-injection/menu/dependency-providers/useClassExample/services/example-one.service.ts","./src/app/components/dependency-injection/menu/dependency-providers/logger.service.ts","./src/app/components/dependency-injection/menu/dependency-providers/useFactoryExample/const/typeofService.const.ts","./src/app/components/dependency-injection/menu/dependency-providers/experimental-logger.service.ts","./src/app/components/dependency-injection/menu/dependency-providers/useClassExample/use-class/use-class.component.ts","./src/app/components/dependency-injection/menu/dependency-providers/useClassExample/use-class/use-class.component.html","./src/app/components/dependency-injection/menu/dependency-providers/useFactoryExample/use-factory/use-factory.component.ts","./src/app/components/dependency-injection/menu/dependency-providers/useFactoryExample/use-factory/use-factory.component.html","./src/app/components/dependency-injection/menu/dependency-providers/useFactoryExample/services/example-factory-two.service.ts","./src/app/components/dependency-injection/menu/dependency-providers/useFactoryExample/services/example-factory-one.service.ts","./src/app/components/dependency-injection/menu/dependency-providers/dependency-providers.module.ts"],"names":[],"mappings":"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","file":"dependency-providers-dependency-providers-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IUseClass } from '../interfaces/useClass.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExampleTwoService implements IUseClass {\n\n  message: string = 'ExampleTwoService method';\n\n  constructor() { }\n\n  get (): string {\n    console.log(`%c${this.message} GET`, 'background: green; color: white; display: block;', );\n    return `${this.message} GET`;\n  };\n  post(): string {\n    console.log(`%c${this.message} POST`, 'background: green; color: white; display: block;', );\n    return `${this.message} POST`;\n  };\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ExperimentalLoggerService } from './experimental-logger.service';\nimport { LoggerService } from './logger.service';\nimport { TYPE_OF_SERVICE } from './useFactoryExample/const/typeofService.const';\nimport { ExampleFactoryOneService } from './useFactoryExample/services/example-factory-one.service';\nimport { ExampleFactoryTwoService } from './useFactoryExample/services/example-factory-two.service';\n\n@Component({\n  selector: 'app-dependency-provider',\n  templateUrl: './dependency-providers.component.html',\n  providers: [\n    // {\n    //   provide: LoggerService,\n    //   useExisting: ExperimentalLoggerService\n    // }\n    {\n\n    provide: LoggerService,\n    useFactory: () =>{\n      const dev = Math.random() > 0.5;\n      console.log('%cuseFactory ', 'color: red; display: block; width: 100%;', dev);\n      if (dev) {\n        return new LoggerService();\n      } else {\n        return new ExperimentalLoggerService();\n      }\n    },\n    deps: []\n    }\n  ]\n})\nexport class DependencyProvidersComponent implements OnInit {\n\n  serviceSelected: string = '';\n\n  constructor(\n    private readonly logger: LoggerService,\n    public readonly serviceOne: ExampleFactoryOneService,\n    public readonly serviceTwo: ExampleFactoryTwoService,\n  ) { }\n\n  ngOnInit(): void {\n    this.logger.prefix = 'App';\n    this.logger.log('dependency providers init')\n  }\n\n  destroyChildComponent(): void {\n    this.serviceSelected = '';\n  }\n\n  buildChildComponent(service: string): void {\n    setTimeout(()=> {\n      this.serviceSelected = service;\n    }, 1000)\n\n  }\n\n  changeService(service: string) {\n    if ( this.serviceSelected ) {\n      this.destroyChildComponent();\n    } else {\n    }\n    if ( service === 'one' ) {\n      TYPE_OF_SERVICE.one = true;\n      this.serviceOne.typeService.next('one')\n      // this.serviceOne.typeOfService(service);\n    } else {\n      TYPE_OF_SERVICE.one = false;\n      // TYPE_OF_SERVICE.one = false;\n      this.serviceTwo.typeService.next('two');\n    }\n    this.buildChildComponent(service);\n\n    // this.serviceTwo.typeOfService(service);\n  }\n\n}\n","<h3>dependency-providers!</h3>\n<a href=\"https://www.youtube.com/watch?v=T1xmCC4y3xo\">Video Decoded Fronted Dependency providers</a> <br>\n<a href=\"https://runebook.dev/es/docs/angular/guide/dependency-injection-providers\">Ejemplo dependecy providers</a>\n<div class=\"row\">\n  <div class=\"col-6\">\n    useClass <br>\n    constructor(private readonly loggerService: LoggerService) <br>\n    <b>Cuando Angular llame a LoggerService, este creará una instancia de ExperimentalLoggerService ( los dos servicios deben tener la misma interfaz). <br>\n    Te permite crear una implementación alternativa</b>\n    <pre>\n      @Component(\n        selector: 'app-dependency-provider',\n        templateUrl: './dependency-providers.component.html',\n        providers: [\n            provide: LoggerService,\n            useClass: ExperimentalLoggerService\n        ]\n      )\n    </pre>\n    <h4>Lo de arriba sería igual que:</h4>\n    <p>const loggerService = new ExperimentalLoggerService()</p>\n    <p>genera una instancia con la clase(injector DI) que le pasas en <b>useClass</b></p>\n  </div>\n\n  <div class=\"col-6\">\n    <app-use-class></app-use-class>\n  </div>\n\n      <div class=\"col-6\">\n          useFactory <br>\n        constructor(private readonly loggerService: LoggerService) <br>\n        <b>Se pueden utilizar diferentes servicios de acuerdo con la condición ( nos permitiría carga un servicio dinámicamente).</b>\n        <b>La Factory nos devolvería el servicio a utilizar dependiendo de la condición. Pudiendo pasar otro servicio como [deps]</b>\n        <h4>Solucion:</h4>\n      <pre>\n        @Component(\n          selector: 'app-menu',\n          templateUrl: './menu.component.html',\n          styleUrls: ['./menu.component.css'],\n          provide: UserInfoService,\n            useFactory: () =>\n              const dev = Math.random() > 0.5;\n              console.log(dev);\n              if (dev) // abre llaves\n                return new LoggerService();\n              else //abre llaves\n                return new ExperimentalLoggerService();\n              //cierra llaver\n            //cierra llaves.\n            deps: [] // deps serán las dependencias que se pasen en useFactory:() como parámetro.\n            <p>Ejemplo: deps: [http] useFactory:(http: HttpClient) =></p>\n        )\n      </pre>\n      </div>\n\n\n      <div class=\"col-6\">\n        <button class=\"btn btn-info\" (click)=\"changeService('one')\">Call service one</button>&nbsp;&nbsp;\n        <button class=\"btn btn-warning\" (click)=\"changeService('two')\">Call service two</button>\n\n        <app-use-factory *ngIf=\"serviceSelected\"></app-use-factory>\n\n      </div>\n      <div class=\"col-6\">\n        useExisting<br>\n        <p>Se utiliza como alias de un DI</p>\n      </div>\n      <div class=\"col-6\">\n        useValue <br>\n          <b>Simplemente se le pasa un valor</b>\n      </div>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DependencyProvidersComponent } from './dependency-providers.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DependencyProvidersComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DependencyProvidersRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { IUseClass } from '../interfaces/useClass.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExampleOneService implements IUseClass {\n\n  message: string = 'ExampleOneService method';\n  constructor() { }\n\n  get (): string {\n    console.log(`%c${this.message} GET`, 'background: green; color: white; display: block;', );\n    return `${this.message} GET`;\n  };\n  post(): string {\n    console.log(`%c${this.message} POST`, 'background: green; color: white; display: block;', );\n    return `${this.message} POST`;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { ILogger } from './logger.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService implements ILogger {\n\n  prefix: string = \"root\";\n  constructor() { }\n  log( message: string ) {\n    console.log('%cLOGGER SERVICE ', 'color: white; background-color: #007acc;', message);\n  }\n}\n","export const TYPE_OF_SERVICE = {\r\n  one: true\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { ILogger } from './logger.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExperimentalLoggerService implements ILogger {\r\n  prefix: string = \"root\";\r\n\r\n  constructor() { }\r\n  log( message: string ) {\r\n    console.log('%c experimental SERVICE', 'color: white; background-color: #007acc;', this.prefix, message);\r\n  }\r\n\r\n  log2( message: string ) {\r\n    console.log('%c experimental', 'color: white; background-color: #007acc;', this.prefix, message);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { ExampleOneService } from '../services/example-one.service';\nimport { ExampleTwoService } from '../services/example-two.service';\n\n@Component({\n  selector: 'app-use-class',\n  templateUrl: './use-class.component.html',\n  styleUrls: ['./use-class.component.css'],\n  providers: [{\n    provide: ExampleOneService,\n    useClass: ExampleTwoService\n  }]\n})\nexport class UseClassComponent implements OnInit {\n\n  messageGet: string;\n  messagePost: string;\n\n  constructor(\n    private readonly exampleUseClass: ExampleOneService\n  ) { }\n\n  ngOnInit(): void {\n    this.messageGet = this.exampleUseClass.get()\n    this.messagePost = this.exampleUseClass.post();\n  }\n\n}\n","<p>use-class works!</p>\nFetching data from Services <br>\n{{ messageGet }}\n<br>\n{{ messagePost }}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { TYPE_OF_SERVICE } from '../const/typeofService.const';\nimport { ExampleFactoryOneService } from '../services/example-factory-one.service';\nimport { ExampleFactoryTwoService } from '../services/example-factory-two.service';\nconst environment = {\n  pro: true\n};\n@Component({\n  selector: 'app-use-factory',\n  templateUrl: './use-factory.component.html',\n  styleUrls: ['./use-factory.component.css'],\n  providers: [\n\n    { provide: 'ENVIRONMENT', useValue: environment },\n    { provide: 'typeOfService', useValue: TYPE_OF_SERVICE },\n    {\n      provide: ExampleFactoryOneService,\n      useFactory: (en: any, typeOfService: any) => {\n      console.log('%cENVIRONMENT', 'color: red; display: block; width: 100%;', en, typeOfService);\n        if ( typeOfService?.one ) {\n          return new ExampleFactoryOneService;\n        }else {\n          return new ExampleFactoryTwoService;\n        }\n      },\n      deps: ['ENVIRONMENT', 'typeOfService']\n    }\n  ],\n})\nexport class UseFactoryComponent implements OnInit, OnDestroy {\n\n  messageService: string;\n\n  constructor(\n    private readonly serviceAny: ExampleFactoryOneService\n  ) { }\n\n\n  ngOnInit(): void {\n   this.messageService = this.serviceAny.get();\n  }\n\n  ngOnDestroy() {\n    console.log('%cbye bye ', 'color: white; background-color: #007acc;', );\n  }\n\n\n\n}\n","<p>use-factory works!</p>\n<h2>{{ messageService }}</h2>\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { IUseFactory } from '../interfaces/useFactory.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExampleFactoryTwoService implements IUseFactory {\n\n  message: string = 'ExampleFactoryTwoService method';\n  typeService = new BehaviorSubject<string>('');\n\n\n  constructor() { }\n\n  typeOfService (service: string){\n    this.typeService.next(service);\n  };\n  get (): string {\n    console.log(`%c${this.message} GET`, 'background: green; color: white; display: block;', );\n    return `${this.message} GET`;\n  };\n  post?: (() => string) | undefined;\n  delete?: (() => string) | undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { IUseFactory } from '../interfaces/useFactory.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExampleFactoryOneService implements IUseFactory {\n\n\n  message: string = 'ExampleFactoryOneService method';\n  typeService = new BehaviorSubject<string>('');\n  constructor() { }\n\n  typeOfService (service: string){\n    this.typeService.next(service);\n  };\n\n  get (): string {\n    console.log(`%c${this.message} GET`, 'background: green; color: white; display: block;', );\n    return `${this.message} GET`;\n  };\n  post?: (() => string) | undefined;\n  delete?: (() => string) | undefined;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DependencyProvidersRoutingModule } from './dependency-providers-routing.module';\nimport { DependencyProvidersComponent } from './dependency-providers.component';\nimport { UseClassComponent } from './useClassExample/use-class/use-class.component';\nimport { UseFactoryComponent } from './useFactoryExample/use-factory/use-factory.component';\n\n\n@NgModule({\n  declarations: [DependencyProvidersComponent, UseClassComponent, UseFactoryComponent],\n  imports: [\n    CommonModule,\n    DependencyProvidersRoutingModule\n  ]\n})\nexport class DependencyProvidersModule { }\n"],"sourceRoot":"webpack:///"}