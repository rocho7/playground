{"version":3,"sources":["./src/app/components/dependency-injection/menu/resolution-modifiers/logger.service.ts","./src/app/components/dependency-injection/menu/menu.component.ts","./src/app/components/dependency-injection/menu/menu.component.html","./src/app/components/dependency-injection/menu/menu-routing.module.ts","./src/app/components/dependency-injection/menu/menu.module.ts","./src/app/core/tokens/user-request.injection-token.ts","./src/app/components/dependency-injection/menu/injection-token/injection-token.component.ts","./src/app/components/dependency-injection/menu/injection-token/injection-token.component.html","./src/app/components/dependency-injection/dependency-injection.module.ts","./src/app/components/dependency-injection/dependency-injection-routing.module.ts","./src/app/components/dependency-injection/menu/injection-token/service/user.service.ts"],"names":[],"mappings":"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","file":"dependency-injection-dependency-injection-module.js","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService {\n\n  constructor() { }\n\n  log( message: string ) {\n    console.log('%c ', 'color: white; background-color: #007acc;', message);\n  }\n}\n","import { Component, Inject, OnInit, Optional, Self } from '@angular/core';\nimport { IUser } from 'src/app/core/tokens/interface/user.interface';\nimport { THEME_PROOF, USER_REQUEST } from 'src/app/core/tokens/user-request.injection-token';\nimport { LoggerService } from './resolution-modifiers/logger.service';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css'],\n  providers: [LoggerService]\n})\nexport class MenuComponent implements OnInit {\n\n  constructor(@Self() private readonly loggerService: LoggerService,\n  @Inject(USER_REQUEST) public users: Promise<IUser[]>,\n  @Inject(THEME_PROOF) public theme: any) {\n    console.clear()\n    if ( this.loggerService ) {\n      this.loggerService.log('constructor init')\n    }\n\n    console.log('%ctheme ', 'background: green; color: white; display: block;', this.theme);\n   }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <a class=\"navbar-brand\" href=\"#\">Dependency Injection</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div class=\"collapse navbar-collapse dark\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"resolution-modifiers\">Resolution Modifieres</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"dependency-providers\">Dependency providers</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"injection-token\">Injection token</a>\n      </li>\n    </ul>\n  </div>\n</nav>\n<h4>Prueba de injection token</h4>\n<ng-container>\n  <ul *ngFor=\"let user of users | async\">\n    <li>{{user?.name}}</li>\n  </ul>\n</ng-container>\n<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MenuComponent } from './menu.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MenuComponent,\n    children: [\n      {\n        path: 'resolution-modifiers',\n        loadChildren: () => import('./resolution-modifiers/resolution-modifiers.module').then( m => m.ResolutionModifiersModule )\n      },\n      {\n        path: 'dependency-providers',\n        loadChildren: () => import('./dependency-providers/dependency-providers.module').then( m => m.DependencyProvidersModule )\n      },\n      {\n        path: 'injection-token',\n        loadChildren: () => import('./injection-token/injection-token.module').then(m => m.InjectionTokenModule)\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MenuRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MenuRoutingModule } from './menu-routing.module';\nimport { MenuComponent } from './menu.component';\nimport { InjectionTokenComponent } from './injection-token/injection-token.component';\n\n\n@NgModule({\n  declarations: [MenuComponent, InjectionTokenComponent],\n  imports: [\n    CommonModule,\n    MenuRoutingModule\n  ]\n})\nexport class MenuModule { }\n","import { inject, InjectionToken } from \"@angular/core\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { UserService } from \"src/app/components/dependency-injection/menu/injection-token/service/user.service\";\r\nimport { IUser } from \"./interface/user.interface\";\r\n\r\nfunction getUser() {\r\n  return 'userService.getUsersRequest()';\r\n}\r\nexport const USER_REQUEST = new InjectionToken<Promise<IUser[]>>('user.request',\r\n{\r\n  factory () {\r\n    const service = inject(UserService);\r\n    return service.getUsersRequest();\r\n  }\r\n});\r\n\r\nexport type ActiveThemeProvider = Observable<string>;\r\nexport const THEME_PROOF = new InjectionToken<ActiveThemeProvider>('active theme', {\r\n  providedIn: 'root',\r\n  factory () {\r\n    return of('string');\r\n  }\r\n});\r\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { IUser } from 'src/app/core/tokens/interface/user.interface';\nimport { USER_REQUEST } from 'src/app/core/tokens/user-request.injection-token';\n\n@Component({\n  selector: 'app-injection-token',\n  templateUrl: './injection-token.component.html',\n  styleUrls: ['./injection-token.component.css']\n})\nexport class InjectionTokenComponent implements OnInit {\n\n  constructor(@Inject(USER_REQUEST) public users: Promise<IUser[]>) { }\n\n   ngOnInit() {\n    console.log('%cusers ', 'color: white; background-color: #007acc;',  this.users);\n  }\n\n}\n","<p>injection-token works!</p>\n<p>InjectionToken es una variable para almacenar valores a nivel global</p>\n<a href=\"https://www.youtube.com/watch?v=P6m3H5jJMWk\">You tube video</a>\n<div>\n  <ul *ngFor=\"let user of users | async\">\n    <li>{{user?.email}}</li>\n  </ul>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DependencyInjectionRoutingModule } from './dependency-injection-routing.module';\nimport { MenuModule } from './menu/menu.module';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MenuModule,\n    DependencyInjectionRoutingModule\n  ]\n})\nexport class DependencyInjectionModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MenuComponent } from './menu/menu.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MenuComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DependencyInjectionRoutingModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { resolve } from 'dns';\nimport { Subject } from 'rxjs';\nimport { IUser } from 'src/app/core/tokens/interface/user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private theme = new Subject<string>();\n  theme$ = this.theme.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n   async getUsersRequest(): Promise<IUser[]> {\n    return await this.http.get('https://jsonplaceholder.typicode.com/users').toPromise() as IUser[];\n  }\n\n  setTheme(theme: string) {\n    this.theme.next(theme)\n  }\n}\n"],"sourceRoot":"webpack:///"}